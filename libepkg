#!/usr/bin/env bash

export ADD_OPTS="${ADD_OPTS:-}"

# import gentoo functions
source /lib/gentoo/functions.sh

checkroot () {
	if [[ "$(whoami)" != root ]] ; then
		eerror "You're not root?...No cookies for you, go away !!!"
		exit 1
	fi
}

checksystemmode() {
	if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-srcmode" ]] ; then
		eerror "The system is set to srcmode (full Gentoo mode), cowardly refusing to run!"
		exit 1
	fi
}

checkportageconfig () {
	# running update on argent specific gentoo settings

	pushd /opt/argentws-build > /dev/null 2>&1
	git remote update > /dev/null 2>&1

	export local confhash=$(git rev-parse @)
	export local rconfhash=$(git rev-parse @{u})

	if [ "${confhash}" != "${rconfhash}" ] ; then
		eerror "Portage config is out of date, run "epkg update" first"
	fi
	popd > /dev/null 2>&1
}

checkportagetree () {
	# running update on gentoo snapshotted overlay

	pushd /usr/portage > /dev/null 2>&1
	git remote update > /dev/null 2>&1

	export local treehash=$(git rev-parse @)
	export local rtreehash=$(git rev-parse @{u})

	if [ "${treehash}" != "${rtreehash}" ] ; then
		eerror "Portage tree is out of date, run "epkg update" first"
	fi
	popd > /dev/null 2>&1
}

checkargentoverlay () {
	# running update on argent gentoo overlay

	pushd /var/lib/layman/argent-ws > /dev/null 2>&1
	git remote update > /dev/null 2>&1
	export local overlayhash=$(git rev-parse @)
	export local roverlayhash=$(git rev-parse @{u})
	if [  "${overlayhash}" != "${roverlayhash}" ] ; then
		eerror "argent-ws overlay is out of date, run "epkg update" first"
	fi
}

checkmakeconf () {
	# function checking the existence and validity of make.conf
	# in accordance wih gentoo and argentws-build standard

        if [ -e "/etc/portage/make.conf" ] ; then
                . /etc/portage/make.conf
		unset PKGDIR
		export PKGDIR="${PKGDIR:-$(cat /etc/portage/make.conf | grep 'PKGDIR=' | cut -d '"' -f2)}"
	else
                eerror "The file does not match the pattern of environment script"
                echo "Please consider using avasile to change to one of the modes"
                echo "avasile --help"
        fi
}

checkportdir () {
	# function to check the existence of portage and argent/portage.git independent dirs:
	# distfiles and packages


	# the unconventional way here: we import /etc/portage/make.conf into current local function
	checkmakeconf

        # check if ${PORTDIR} exists

        if [ ! -d "${PORTDIR}" ] ; then
                eerror "No such directory: ${PORTDIR}"
                echo "Consider running: epkg update"
                exit 1
        fi

        # check if distfiles exist. Again, we might never know what Gentoo users are up to

        if [ ! -d "${PORTDIR}"/distfiles ] ; then
                eerror "No such directory: ${PORTDIR}/distfiles"
                echo "Consider creating the directory with the right ownership:"
                echo "i.e.: chgrp portage ${PORTDIR}/distfiles"
                exit 1
        fi

        # check if ${PKGDIR} exists

        if [ ! -d "${PKGDIR}" ] ; then
                eerror "No such directory: ${PKGDIR}/"
                echo "Consider creating the directory with the right ownership:"
                echo "i.e.: chgrp portage ${PKGDIR}/"
                exit 1
        fi
}

checksync () {
	checkportagetree
	checkargentoverlay
	checkportageconfig
}

syncrepos () {
	if [[ -e "/etc/portage/repos.conf/layman.conf" ]] && [[ "$(cat /etc/portage/repos.conf/layman.conf | grep argent-ws )" ]] ; then
		sed -i 's|auto-sync = No|auto-sync = yes|g' /etc/portage/repos.conf/layman.conf
	fi

	emerge --sync
}

backuppkg () {
	# function to provide backup packages with own configurations

	# a forenote: although if you run usermode or devmode, the installing packages will already be saved
	# but if you run epkg cleanlocalpkg, you can start all over and save what packages you already configured
	# like saving apache with own configs for example, for future use

        # the unconventional way here: we import /etc/portage/make.conf into current local function

	checkmakeconf

	if [[ -z "$@" ]] ; then
		eerror "You have not specified any package to backup"
		echo " "
		exit 1
	fi

	# checking if ${PKGDIR} exists
	# usually it's /usr/portage/ if you're on avasile --usermode or --devmode

	if [ -d "${PKGDIR}" ] ; then
		quickpkg --include-config y --include-unmodified-config y "$@"
		echo ""
		echo "All packages were saved in ${PKGDIR} by category"
		echo "Please make sure these files will not be overwritted!"
		echo "If you consider further backup on the same package"
		echo "consider copying packages from ${PKGDIR} into customized directories"
		echo "Although, not recommended, you can epkg install them by path ( from customized directories )"
		echo "To customize directory, you can use variable PKGDIR as: PKGDIR="/location/" epkg backuppkg"
		echo " "
	else
		echo "  "
		eerror "No such directory: ${PKGDIR}"
		echo "Please consider creating the $PKGDIR directory"
		echo "And set $PKGDIR GID to portage!"
		echo " "
		exit 1
	fi

	# regenerating environment here is a must!
	env-update && source /etc/profile
}

backupallpkg () {
	# function to *backup all packages in the system* for future use

	# the unconventional way here: we import /etc/portage/make.conf into current local function
        if [[ -z "$@" ]] ; then
                eerror "You have not specified any package to backup"
                echo " "
                exit 1
        fi

	checkportdir

	eerror "Warning: If you backup everything, make sure you keep the packages safe :)"
	eerror "We cannot take responsibility of safe-guarding the newly backup-ed up system"

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
                eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
                eerror "If you continue, you continue on your own risk!"
		eerror "Make sure you keep the backup safe!"
                sleep 3
                quickpkg --include-config y --include-unmodified-config y $(qlist -IC)
        else
                quickpkg --include-config y --include-unmodified-config y $(qlist -IC)
        fi

	# regenerating environment here is a must!
	env-update && source /etc/profile
}

cleanoutdated () {
	# function designed to clearout any outdated package using gentoolkit

	# the unconventional way here: we import /etc/portage/make.conf into current local function

	checkmakeconf

	# we have 2 checks here: if usr/portage and usr/portage/packages really exist
	# we may never know what users do to their portage dirs in Gentoo system 

	if [ -d "${PKGDIR}" ] ; then
		/usr/bin/eclean-pkg
	else
		eerror "No such directory ${PKGDIR}"
		echo "Please consider: mkdir ${PKGDIR}/"
		echo "chgrp portage ${PKGDIR}"
		exit 1
	fi

	# regenerating environment here is a must!
	env-update && source /etc/profile
}

cleanlocalpkg () {
        # the unconventional way here: we import /etc/portage/make.conf into current local function

	checkmakeconf

        # function to cleanup all local packages in /usr/portage/packages
        # it also includes deletion of /usr/portage/Packages

        # if we do not have any /usr/portage, there is no reason we should continue
	if [ -d "${PKGDIR}" ] ; then
		rm -rf "${PKGDIR}"/* || exit 1
	else
		eerror "No such directory ${PKGDIR}"
		echo "Make sure you have this directory"
		echo "Also make sure you have the right GID:"
		echo "i.e.: chgrp portage ${PKGDIR}"
		exit 1
	fi

	# regenerating environment here is a must!
	env-update && source /etc/profile
}

src-newuse () {
        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
                eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
                eerror "If you continue, you continue on your own risk!"
                sleep 3
                EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge --newuse --changed-use "$@"
        else
                EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge --newuse --changed-use "$@"
        fi
}

recompilepkg () {
	# function to call a recompile of a package and save it to ${PKGDIR}"

	if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
		eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
		eerror "If you continue, you continue on your own risk!"
		sleep 3
		EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -va "$@"
	else
		EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -va "$@"
	fi
}

recompileallpkg () {
	# function to recompile everything on the system and also saving all the recompiled packages. Usually in /usr/portage/packages

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
		eerror "You are not allowed to run in --usermode, we propose using: avasile --devmode or --srcmode for this"
		exit 1
	else
		EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -va $(qlist -IC)
		eerror "Warning: if there are packages that are not found, you must run: epkg update"
		eerror "If the error persists, force remove the package causing the corruption:"
		eerror "in --devmode: epkg remove <package-name>"
		eerror "in --srcmode: emerge --unmerge <package-name>"
		eerror "Then re-run the same command: epkg recompileallpkg"
	fi
}

autorecompilepkg () {

    # function to call a recompile of a package and save it to ${PKGDIR}"

    if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
        eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
        eerror "If you continue, you continue on your own risk!"
        sleep 3
        EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -v "$@"
    else
        EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -v "$@"
    fi

}

autorecompileallpkg () {
    # function to recompile everything on the system and also saving all the recompiled packages. Usually in /usr/portage/packages

    if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
        eerror "You are not allowed to run in --usermode, we propose using: avasile --devmode or --srcmode for this"
        exit 1
    else
        EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -v $(qlist -IC)
    fi
}

recompile-depend () {
        # function to recompile all the packages that directly depend on this package

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
                eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
                eerror "If you continue, you continue on your own risk!"
                sleep 3
                cat /dev/null > /tmp/epkg_temporary_list
                equery d "$@" | awk '{print $1}' | sed -e 's/^/=/' >> /tmp/epkg_temporary_list
                if [[ -s "/tmp/epkg_temporary_list" ]] ; then
                        EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge "${ADD_OPTS}" -va $( cat /tmp/epkg_temporary_list )
                else
                        echo "There are no packages that depend on given package(s)"
                fi
                rm -f /tmp/epkg_temporary_list || exit 1
        else
                cat /dev/null > /tmp/epkg_temporary_list
                equery d "$@" | awk '{print $1}' | sed -e 's/^/=/' >> /tmp/epkg_temporary_list
                if [[ -s "/tmp/epkg_temporary_list" ]] ; then
                        EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge "${ADD_OPTS}" -va $( cat /tmp/epkg_temporary_list )
                else
                        echo "There are no packages that depend on given package(s)"
                fi
                rm -f /tmp/epkg_temporary_list || exit 1
        fi

}

recompile-depend-new () {
        # function to recompile all the new packages that directly depend on this package

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
		eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
		eerror "If you continue, you continue on your own risk!"
		sleep 3
		cat /dev/null > /tmp/epkg_temporary_list
		for i in $(equery d "$@" | awk '{print $1}') ; do echo =${i} >> /tmp/epkg_temporary_list ; done
                if [[ -s "/tmp/epkg_temporary_list" ]] ; then
                        EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -va $( cat /tmp/epkg_temporary_list ) "${ADD_OPTS}"
                else
                        echo "There are no packages that depend on given package(s)"
                fi
		rm -f /tmp/epkg_temporary_list || exit 1
        else
		cat /dev/null > /tmp/epkg_temporary_list
		for i in $(equery d "$@" | awk '{print $1}') ; do echo =${i} >> /tmp/epkg_temporary_list ; done
                if [[ -s "/tmp/epkg_temporary_list" ]] ; then
                        EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -va $( cat /tmp/epkg_temporary_list ) "${ADD_OPTS}"
                else
                        echo "There are no packages that depend on given package(s)"
                fi
		rm -f /tmp/epkg_temporary_list || exit 1
        fi

}

autorecompile-depend () {
        # function to recompile all the packages that directly depend on this package with no confirmation

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
                eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
                eerror "If you continue, you continue on your own risk!"
                sleep 3
                cat /dev/null > /tmp/epkg_temporary_list
                equery d "$@" | awk '{print $1}' | sed -e 's/^/=/' >> /tmp/epkg_temporary_list
                if [[ -s "/tmp/epkg_temporary_list" ]] ; then
                        EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -v $( cat /tmp/epkg_temporary_list ) "${ADD_OPTS}"
                else
                        echo "There are no packages that depend on given package(s)"
                fi
                rm -f /tmp/epkg_temporary_list || exit 1
        else
                cat /dev/null > /tmp/epkg_temporary_list
                equery d "$@" | awk '{print $1}' | sed -e 's/^/=/' >> /tmp/epkg_temporary_list
                if [[ -s "/tmp/epkg_temporary_list" ]] ; then
                        EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -v $( cat /tmp/epkg_temporary_list ) "${ADD_OPTS}"
                else
                        echo "There are no packages that depend on given package(s)"
                fi
                rm -f /tmp/epkg_temporary_list || exit 1
        fi

}

autorecompile-depend-new () {
        # function to recompile all the new packages that directly depend on this package with no confirmation

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
		eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
		eerror "If you continue, you continue on your own risk!"
		sleep 3
		cat /dev/null > /tmp/epkg_temporary_list
		for i in $(equery d "$@" | awk '{print $1}') ; do echo =${i} >> /tmp/epkg_temporary_list ; done
		if [[ -s "/tmp/epkg_temporary_list" ]] ; then
			EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -v $( cat /tmp/epkg_temporary_list ) "${ADD_OPTS}"
		else
			echo "There are no packages that depend on given package(s)"
		fi
		rm -f /tmp/epkg_temporary_list || exit 1
        else
		cat /dev/null > /tmp/epkg_temporary_list
		for i in $(equery d "$@" | awk '{print $1}') ; do echo =${i} >> /tmp/epkg_temporary_list ; done
		if [[ -s "/tmp/epkg_temporary_list" ]] ; then
			EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge -v $( cat /tmp/epkg_temporary_list ) "${ADD_OPTS}"
		else
			echo "There are no packages that depend on given package(s)"
		fi
		rm -f /tmp/epkg_temporary_list || exit 1
        fi

}

reinstall-depend () {
        # function to recompile all new packages that directly depend on this package

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
		eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
		eerror "If you continue, you continue on your own risk!"
		sleep 3
		cat /dev/null > /tmp/epkg_temporary_list
		for i in $(equery d "$@" | awk '{print $1}') ; do echo =${i} >> /tmp/epkg_temporary_list ; done
		emerge -va $( cat /tmp/epkg_temporary_list )
		rm -f /tmp/epkg_temporary_list || exit 1
        else
		cat /dev/null > /tmp/epkg_temporary_list
		for i in $(equery d "$@" | awk '{print $1}') ; do echo =${i} >> /tmp/epkg_temporary_list ; done
		emerge -va $( cat /tmp/epkg_temporary_list )
		rm -f /tmp/epkg_temporary_list || exit 1
        fi

}

autoreinstall-depend () {
        # function to recompile all new packages that directly depend on this package

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
		eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
		eerror "If you continue, you continue on your own risk!"
		sleep 3
		cat /dev/null > /tmp/epkg_temporary_list
		for i in $(equery d "$@" | awk '{print $1}') ; do echo =${i} >> /tmp/epkg_temporary_list ; done
		emerge -v $( cat /tmp/epkg_temporary_list )
		rm -f /tmp/epkg_temporary_list || exit 1
        else
		cat /dev/null > /tmp/epkg_temporary_list
		for i in $(equery d "$@" | awk '{print $1}') ; do echo =${i} >> /tmp/epkg_temporary_list ; done
		emerge -v $( cat /tmp/epkg_temporary_list )
		rm -f /tmp/epkg_temporary_list || exit 1
        fi

}

fetchsourcepkg () {
	# function to download the source of the program for development / patching purposes


	# the unconventional way here: we import /etc/portage/make.conf into current local function

	checkportdir

	# function to warn the regular user that he's doin something wrong
	# but still do it anyway.

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
		eerror "You are on --usermode, we propose using: avasile --devmode or --srcmode for this"
		sleep 3
		EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge --fetchonly "$@"
	else
		EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge --fetchonly "$@"
	fi

	# regenerating environment here is a must!
	env-update && source /etc/profile
}

fetchbinpkg () {
        # function to download the source of the program for development / patching purposes


        # the unconventional way here: we import /etc/portage/make.conf into current local function

        checkportdir

        # function to warn the regular user that he's doin something wrong
        # but still do it anyway.

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
                eerror "Fetching binary package(s) from remote"
                sleep 2
                EMERGE_DEFAULT_OPTS="--getbinpkgonly --rebuilt-binaries" emerge --fetchonly "$@"
        else
                EMERGE_DEFAULT_OPTS="--getbinpkgonly --rebuilt-binaries" emerge --fetchonly "$@"
        fi

        # regenerating environment here is a must!
        env-update && source /etc/profile
}

remove-orphans () {
	# The function calls 'emerge --depclean -a' which removes orphaned packages
	# Probably the most successful emerge algorythm ever made
	checkmakeconf

	emerge --depclean -a

}

buildinstall () {
	# Stands for build ( -Bv ) and install ( -va with --getbinpkg )
	# Also regenerates the binhost Packages file
        if [[ -z "$@" ]] ; then
                eerror "You have not specified any package to build & install"
		echo " "
                exit 1
        fi

	checkportdir

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
                eerror "You cannot run buildpkgonly from the user profile!"
                exit 1
        else
                EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge --with-bdeps=y -Bva "$@"
		EMERGE_DEFAULT_OPTS="--getbinpkg --rebuilt-binaries" emerge -av "$@"
		emaint -f binhost
        fi

        # regenerating environment here is a must!
        env-update && source /etc/profile
}

autobuildinstall () {
        # Stands for build ( -Bv ) and install ( -va with --getbinpkg ) automatically
	# Also regenerates the binhost Packages file

        if [[ -z "$@" ]] ; then
                eerror "You have not specified any package to build & install"
                echo " "
                exit 1
        fi

        checkportdir

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
                eerror "You cannot run buildpkgonly from the user profile!"
                exit 1
        else
                EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge --with-bdeps=y -Bv "$@"
		EMERGE_DEFAULT_OPTS="--getbinpkg --rebuilt-binaries" emerge -v "$@"
		emaint -f binhost
        fi

        # regenerating environment here is a must!
        env-update && source /etc/profile
}

buildpkgonly () {
	# function to only build 1 or more packages based on input

	# should work as: epkg buildpkg-only <something>

	checkportdir

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
                eerror "You cannot run buildpkgonly from the user profile!"
                exit 1
        else
                EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge --with-bdeps=y -Bva "$@"
        fi

        # regenerating environment here is a must!
        env-update && source /etc/profile
}

autobuildpkgonly () {
        # function to only build 1 or more packages based on input

        # should work as: epkg buildpkg-only <something>

        checkportdir

        if [[ "$(readlink -f "/etc/portage/make.conf")" = "/opt/argentws-build/conf/intel/portage/make.conf.amd64-user" ]] ; then
                eerror "You cannot run buildpkgonly from the user profile!"
                exit 1
        else
                EMERGE_DEFAULT_OPTS="--rebuilt-binaries" emerge --with-bdeps=y -Bv "$@"
        fi

        # regenerating environment here is a must!
        env-update && source /etc/profile
}

syncportageconfig () {
	# syncing with the latest updates on our argent gentoo configs

	pushd /opt/argentws-build > /dev/null 2>&1
	echo ">>> Syncing 'portage config' into '/etc/portage' "
	echo "GIT pulling latest modifications. Please, stand by"

	git pull

	echo "=== Sync completed for 'portage config'"

	popd > /dev/null 2>&1
}

argentsync () {
	syncrepos
	syncportageconfig
}
